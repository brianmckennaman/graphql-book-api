{"version":3,"sources":["utils/auth.js","utils/API.js","utils/localStorage.js","utils/mutations.js","pages/SearchBooks.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","saveBook","bookData","fetch","method","headers","authorization","body","JSON","stringify","removeBookId","bookId","savedBookIds","parse","updatedSavedBookIds","filter","savedBookId","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","i","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveSelectedBook","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","response","ok","Error","json","items","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","data","useQuery","deleteBook","userData","me","userDataLength","Object","keys","handleDeleteBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","createUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","loginUser","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.808b228c.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();","// route to get logged in user's info (needs the token)\r\nexport const getMe = (token) => {\r\n    return fetch('/api/users/me', {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n  };\r\n  \r\n  export const createUser = (userData) => {\r\n    return fetch('/api/users', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(userData),\r\n    });\r\n  };\r\n  \r\n  export const loginUser = (userData) => {\r\n    return fetch('/api/users/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(userData),\r\n    });\r\n  };\r\n  \r\n  // save book data for a logged in user\r\n  export const saveBook = (bookData, token) => {\r\n    return fetch('/api/users', {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(bookData),\r\n    });\r\n  };\r\n  \r\n  // remove saved book data for a logged in user\r\n  export const deleteBook = (bookId, token) => {\r\n    return fetch(`/api/users/books/${bookId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n  };\r\n  \r\n  // make a search to google books api\r\n  // https://www.googleapis.com/books/v1/volumes?q=harry+potter\r\n  export const searchGoogleBooks = (query) => {\r\n    return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\r\n  };","export const getSavedBookIds = () => {\r\n    const savedBookIds = localStorage.getItem('saved_books')\r\n      ? JSON.parse(localStorage.getItem('saved_books'))\r\n      : [];\r\n  \r\n    return savedBookIds;\r\n  };\r\n  \r\n  export const saveBookIds = (bookIdArr) => {\r\n    if (bookIdArr.length) {\r\n      localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\r\n    } else {\r\n      localStorage.removeItem('saved_books');\r\n    }\r\n  };\r\n  \r\n  export const removeBookId = (bookId) => {\r\n    const savedBookIds = localStorage.getItem('saved_books')\r\n      ? JSON.parse(localStorage.getItem('saved_books'))\r\n      : null;\r\n  \r\n    if (!savedBookIds) {\r\n      return false;\r\n    }\r\n  \r\n    const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\r\n    localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\r\n  \r\n    return true;\r\n  };","import { gql } from '@apollo/client'\r\n\r\nexport const LOGIN_USER = gql`\r\nmutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n        token\r\n        user{\r\n            _id\r\n            username\r\n        }\r\n    }\r\n}`\r\n\r\nexport const ADD_USER = gql`\r\nmutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n        token\r\n        user {\r\n            _id\r\n            username\r\n        }\r\n    }\r\n}`\r\n\r\nexport const SAVE_BOOK = gql`\r\nmutation saveBook($saveThisBook: BookInput!) {\r\n    saveBook(bookToSave: $saveThisBook) {\r\n        _id\r\n        username\r\n        email\r\n        bookCount\r\n        savedBooks {\r\n            bookId\r\n            authors\r\n            description\r\n            title\r\n            image\r\n            link\r\n        }\r\n    }\r\n}`\r\n\r\nexport const REMOVE_BOOK = gql`\r\nmutation removeBook($bookId: String!) {\r\n    removeBook(bookId: $bookId) {\r\n        _id\r\n        email\r\n        bookCount\r\n        username\r\n        savedBooks {\r\n            bookId\r\n            title\r\n            authors\r\n            description\r\n            link\r\n            image\r\n        }\r\n    }\r\n}`","import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\r\n\r\nimport Auth from '../utils/auth';\r\nimport { saveBook, searchGoogleBooks } from '../utils/API';\r\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\r\n\r\n// import graphql mutations\r\nimport { useMutation } from '@apollo/client'\r\nimport { SAVE_BOOK } from '../utils/mutations'\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState('');\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  // imported save books mutation\r\n  const [saveSelectedBook] =useMutation(SAVE_BOOK);\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || ['No author to display'],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput('');\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // refactored code to use mutations\r\n      await saveSelectedBook({\r\n        variables: { saveBook }\r\n      })\r\n\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name='searchInput'\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type='text'\r\n                  size='lg'\r\n                  placeholder='Search for a book'\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type='submit' variant='success' size='lg'>\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : 'Search for a book to begin'}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? (\r\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\r\n                      className='btn-block btn-info'\r\n                      onClick={() => handleSaveBook(book.bookId)}>\r\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\r\n                        ? 'This book has already been saved!'\r\n                        : 'Save this Book!'}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;","import { gql } from '@apollo/client'\r\n\r\nexport const GET_ME = gql`\r\n{\r\n    me {\r\n        username\r\n        email\r\n        _id\r\n        bookCount\r\n        savedBooks {\r\n            title\r\n            authors\r\n            image\r\n            bookId\r\n            link\r\n        }\r\n    }\r\n}`","import React from 'react';\r\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\r\n// import graphql functionality\r\nimport {useQuery, useMutation } from '@apollo/client';\r\nimport Auth from '../utils/auth';\r\nimport { GET_ME } from '../utils/queries';\r\nimport { REMOVE_BOOK } from '../utils/mutations';\r\nimport { removeBookId } from '../utils/localStorage';\r\n\r\n// refactored code to use mutations and queries\r\nconst SavedBooks = () => {\r\n const { data } = useQuery(GET_ME);\r\n const [deleteBook] = useMutation(REMOVE_BOOK);\r\n const userData = data?.me || {};\r\n\r\n  // use this to determine if `useEffect()` hook needs to run again\r\n  const userDataLength = Object.keys(userData).length;\r\n\r\n  // useEffect(() => {\r\n  //   const getUserData = async () => {\r\n  //     try {\r\n  //       const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n  //       if (!token) {\r\n  //         return false;\r\n  //       }\r\n\r\n  //       const response = await getMe(token);\r\n\r\n  //       if (!response.ok) {\r\n  //         throw new Error('something went wrong!');\r\n  //       }\r\n\r\n  //       const user = await response.json();\r\n  //       setUserData(user);\r\n  //     } catch (err) {\r\n  //       console.error(err);\r\n  //     }\r\n  //   };\r\n\r\n  //   getUserData();\r\n  // }, [userDataLength]);\r\n\r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    // refactored code to use deleteBook mutation\r\n    try {\r\n      await deleteBook({\r\n        variables: { bookId }\r\n      })\r\n      // upon success, remove book's id from localStorage\r\n      removeBookId(bookId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // if data isn't here yet, say so\r\n  if (!userDataLength) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\r\n            : 'You have no saved books!'}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;","import React, { useEffect, useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport Auth from '../utils/auth';\r\n// import graphql mutations\r\nimport { ADD_USER } from '../utils/mutations';\r\nimport { useMutation } from '@apollo/client'\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  // add mutation functionality\r\n  const [createUser, { error }] = useMutation(ADD_USER);\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      setShowAlert(true);\r\n    } else {\r\n      setShowAlert(false);\r\n    }\r\n  }, [error]);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    // refactored code to use graphql mutation\r\n    try {\r\n      const { data } = await createUser({\r\n        variables: { ...userFormData },\r\n      });\r\n      Auth.login(data.createUser.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='username'>Username</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your username'\r\n            name='username'\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Your email address'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;","// see SignupForm.js for comments\r\nimport React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport Auth from '../utils/auth';\r\n// import graphqul mutations\r\nimport { LOGIN_USER } from '../utils/mutations'\r\nimport { useMutation } from '@apollo/client'\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  // add mutation variable\r\n  const [loginUser] = useMutation(LOGIN_USER)\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    // refactor code to use login mutation\r\n    try {\r\n      const { data } = await loginUser({\r\n        variables: { ...userFormData }\r\n      });\r\n      Auth.login(data.login.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your email'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n        <Container fluid>\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Google Books Search\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n          <Navbar.Collapse id='navbar'>\r\n            <Nav className='ml-auto'>\r\n              <Nav.Link as={Link} to='/'>\r\n                Search For Books\r\n              </Nav.Link>\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n                <>\r\n                  <Nav.Link as={Link} to='/saved'>\r\n                    See Your Books\r\n                  </Nav.Link>\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      {/* set modal data up */}\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n        <Tab.Container defaultActiveKey='login'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id='signup-modal'>\r\n              <Nav variant='pills'>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Modal.Body>\r\n        </Tab.Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport SearchBooks from './pages/SearchBooks';\r\nimport SavedBooks from './pages/SavedBooks';\r\nimport Navbar from './components/Navbar';\r\n// import apollo client server\r\nimport { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink } from '@apollo/client'\r\nimport { setContext } from '@apollo/client/link/context'\r\n\r\n// connect to graphql server\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql'\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : ''\r\n    },\r\n  }\r\n});\r\n\r\n// connect to apollo client\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n    <Router>\r\n      <>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route exact path='/' component={SearchBooks} />\r\n          <Route exact path='/saved' component={SavedBooks} />\r\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\r\n        </Switch>\r\n      </>\r\n    </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}